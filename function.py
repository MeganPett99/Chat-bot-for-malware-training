from nltk_utils import tokenize, stemmer
from keras.models import load_model
import numpy
import json
import pickle
import random


model = load_model('chat_model.h5')
intents = json.loads(open('intents.json').read())
words = pickle.load(open('words.pkl', 'rb'))
labels = pickle.load(open('labels.pkl', 'rb'))


def clean_up_sentence(sentence):
    input_words = tokenize(sentence)
    input_words = [stemmer.stem(w.lower()) for w in input_words]
    return input_words
# tokenize and stem any input words from the GUI


def bow(sentence, word, show_details=True):
    input_words = clean_up_sentence(sentence)
    bag = [0]*len(word)
    for u in input_words:
        for i, w in enumerate(word):
            if w == u:
                bag[i] = 1
                if show_details:
                    print("found in bag: %s" % w)
    return numpy.array(bag)
# calls input_words and creates a bag of words to be prepared for the next function


def predict_class(sentence, model):
    # filter out predictions below a threshold
    p = bow(sentence, words, show_details=False)
    res = model.predict(numpy.array([p]))[0]
    error_threshold = 0.25
    results = [[i, r] for i, r in enumerate(res) if r > error_threshold]
    # sort by strength of probability
    results.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in results:
        return_list.append({"intent": labels[r[0]], "probability": str(r[1])})
    return return_list
# the predict function takes the bag of words that is created from the user response to create an output of probability
# the output = the strength of the probability and the intents
# error threshold is 0.25 to avoid over fitting


def get_response(ints, intents_json):
    tag = ints[0]['intent']
    list_of_intents = intents_json['intents']
    for i in list_of_intents:
        if i['tag'] == tag:
            respond = random.choice(i['responses'])
            break
    return respond
# this function uses the list created in the predict function to generate a response with the best weighting


def chat_response(user_input):
    ints = predict_class(user_input, model)
    response = get_response(ints, intents)
    return response
# this function calls the predict class and get response to be used within the gui to give the user the response
